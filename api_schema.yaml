version: 1
meta:
  title: Easyapp API - Frontend Integration Schema
  auth:
    scheme: bearer
    header: Authorization
    format: 'Authorization: Bearer <token>'
  dates: ISO 8601 (UTC)

paths:
  /api/auth/register/:
    post:
      description: Register a new user and receive a JWT token.
      request:
        contentType: application/json
        required: [username, password]
        properties:
          username: { type: string, minLength: 3, maxLength: 150 }
          password: { type: string, minLength: 6, maxLength: 128 }
      responses:
        '201':
          description: User registered
          body:
            user:
              id: integer
              username: string
              date_joined: string (date-time)
            token: string (JWT)
        '400': { description: Validation error }

  /api/auth/login/:
    post:
      description: Login and receive a JWT token.
      request:
        contentType: application/json
        required: [username, password]
        properties:
          username: { type: string }
          password: { type: string }
      responses:
        '200':
          description: Login successful
          body:
            user:
              id: integer
              username: string
              date_joined: string (date-time)
            token: string (JWT)
        '400': { description: Invalid credentials }

  /api/auth/me/:
    get:
      description: Get current authenticated user.
      auth: required
      headers:
        Authorization: 'Bearer <token>'
      responses:
        '200':
          body:
            id: integer
            username: string
            date_joined: string (date-time)
        '401': { description: Unauthorized }

  /api/listings/popular/:
    get:
      description: Get top listings by view_count.
      query:
        limit: { type: integer, required: false, description: 'Max items (default 20, max 100)' }
      responses:
        '200':
          body:
            - id: integer
              title: string
              image_url: string | null (uri)
              price: string | null (decimal as string)
              view_count: integer

  /api/listings/by-url/:
    post:
      description: If listing exists by URL, return it; otherwise fetch from URL, create and return.
      request:
        contentType: application/json
        required: [url]
        properties:
          url: { type: string, format: uri }
      responses:
        '200': { $ref: '#/components/ListingDetail' }
        '201': { $ref: '#/components/ListingDetail' }
        '400': { description: Invalid URL }
        '422': { description: Unable to fetch or parse listing }

  /api/listings/{pk}/:
    get:
      description: Retrieve listing by ID and increment view count.
      path:
        pk: { type: integer, required: true }
      responses:
        '200': { $ref: '#/components/ListingDetail' }
        '404': { description: Not found }

  /api/listings/{listing_id}/comments/:
    get:
      description: List comments for listing ordered by created_at desc with limit/offset pagination.
      path:
        listing_id: { type: integer, required: true }
      query:
        limit: { type: integer, required: false, description: 'Default 20, max 100' }
        offset: { type: integer, required: false, description: 'Default 0' }
      responses:
        '200':
          body:
            count: integer
            limit: integer
            offset: integer
            results:
              - id: integer
                content: string (placeholder if deleted)
                user:
                  id: integer
                  username: string
                created_at: string (date-time)
                updated_at: string (date-time)
                edited: boolean
                deleted: boolean
                likes_count: integer
                is_owner: boolean
        '404': { description: Listing not found }
    post:
      description: Create a comment for listing.
      auth: required
      headers:
        Authorization: 'Bearer <token>'
      path:
        listing_id: { type: integer, required: true }
      request:
        contentType: application/json
        required: [content]
        properties:
          content: { type: string, minLength: 1 }
      responses:
        '201': { $ref: '#/components/CommentRead' }
        '400':
          description: Banned patterns violated
          body:
            - id: integer
              description: string
        '401': { description: Unauthorized }
        '404': { description: Listing not found }

  /api/comments/{pk}/:
    get:
      description: Retrieve a single comment by ID.
      path:
        pk: { type: integer, required: true }
      responses:
        '200': { $ref: '#/components/CommentRead' }
        '404': { description: Not found }
    patch:
      description: Update own comment (partial). Re-validates against banned patterns.
      auth: required
      headers:
        Authorization: 'Bearer <token>'
      path:
        pk: { type: integer, required: true }
      request:
        contentType: application/json
        required: []
        properties:
          content: { type: string }
      responses:
        '200': { $ref: '#/components/CommentRead' }
        '400':
          description: Banned patterns violated
          body:
            - id: integer
              description: string
        '401': { description: Unauthorized }
        '403': { description: Forbidden }
        '404': { description: Not found }
    delete:
      description: Soft-delete own comment (mark deleted=true).
      auth: required
      headers:
        Authorization: 'Bearer <token>'
      path:
        pk: { type: integer, required: true }
      responses:
        '204': { description: Deleted }
        '401': { description: Unauthorized }
        '403': { description: Forbidden }
        '404': { description: Not found }

  /api/comments/{pk}/like/:
    post:
      description: Toggle like for a comment. If existed, it will be removed; otherwise created.
      auth: required
      headers:
        Authorization: 'Bearer <token>'
      path:
        pk: { type: integer, required: true }
      responses:
        '200':
          body:
            liked: boolean
            likes_count: integer
        '401': { description: Unauthorized }
        '404': { description: Not found }

components:
  ListingDetail:
    id: integer
    avito_url: string (uri)
    title: string
    image_url: string | null (uri)
    price: string | null (decimal as string)
    description: string
    view_count: integer
    created_at: string (date-time)
    updated_at: string (date-time)
  CommentRead:
    id: integer
    content: string (placeholder if deleted)
    user:
      id: integer
      username: string
    created_at: string (date-time)
    updated_at: string (date-time)
    edited: boolean
    deleted: boolean
    likes_count: integer
    is_owner: boolean
